import { h, useState, useEffect } from 'skara-js';

export function App() {
  const [activeSection, setActiveSection] = useState('home');
  const [count, setCount] = useState(0);
  const [todos, setTodos] = useState([]);
  const [todoInput, setTodoInput] = useState('');
  const [seconds, setSeconds] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [codeExample, setCodeExample] = useState('counter');
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  // Timer effect
  useEffect(() => {
    let interval = null;
    if (isRunning) {
      interval = setInterval(() => {
        setSeconds(s => s + 1);
      }, 1000);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isRunning]);

  // Todo functions
  const addTodo = () => {
    if (todoInput.trim()) {
      setTodos([...todos, { id: Date.now(), text: todoInput, done: false }]);
      setTodoInput('');
    }
  };

  const toggleTodo = (id) => {
    setTodos(todos.map(todo => 
      todo.id === id ? { ...todo, done: !todo.done } : todo
    ));
  };

  const deleteTodo = (id) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  const formatTime = (secs) => {
    const mins = Math.floor(secs / 60);
    const remainingSecs = secs % 60;
    return `${mins.toString().padStart(2, '0')}:${remainingSecs.toString().padStart(2, '0')}`;
  };

  const codeExamples = {
    counter: `import { h, useState } from 'skara-js';

export function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <div className="counter-demo">
      <h2>Count: {count}</h2>
      <button onClick={() => setCount(count + 1)}>
        Increase
      </button>
    </div>
  );
}`,
    
    todo: `import { h, useState } from 'skara-js';

export function TodoApp() {
  const [todos, setTodos] = useState([]);
  const [input, setInput] = useState('');
  
  const addTodo = () => {
    if (input.trim()) {
      setTodos([...todos, { 
        id: Date.now(), 
        text: input, 
        done: false 
      }]);
      setInput('');
    }
  };
  
  return (
    <div className="todo-app">
      <input 
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyPress={(e) => e.key === 'Enter' && addTodo()}
      />
      <button onClick={addTodo}>Add</button>
      
      {todos.map(todo => (
        <div key={todo.id}>
          {todo.text}
        </div>
      ))}
    </div>
  );
}`,

    effect: `import { h, useState, useEffect } from 'skara-js';

export function Timer() {
  const [seconds, setSeconds] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  
  useEffect(() => {
    let interval = null;
    if (isRunning) {
      interval = setInterval(() => {
        setSeconds(s => s + 1);
      }, 1000);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isRunning]);
  
  return (
    <div className="timer">
      <h2>{seconds}s</h2>
      <button onClick={() => setIsRunning(!isRunning)}>
        {isRunning ? 'Pause' : 'Start'}
      </button>
    </div>
  );
}`
  };

  const renderSection = () => {
    switch(activeSection) {
      case 'home':
        return (
          <div>
            {/* Hero Section */}
            <section className="hero-section">
              <div className="hero-content">
                <div className="hero-badge">
                  <span className="badge-text">🏛️ Ancient Wisdom • Modern Power</span>
                </div>
                <h1 className="hero-title">
                  SKARA.JS
                </h1>
                <p className="hero-subtitle">
                  A React-like framework inspired by the ancient stone circles of Skara Brae.
                  <br />
                  <span className="ancient-text">Built to last through the ages.</span>
                </p>
                <div className="hero-buttons">
                  <button 
                    className="neon-button primary large"
                    onClick={() => setActiveSection('docs')}
                  >
                    🚀 Get Started
                  </button>
                  <button 
                    className="neon-button secondary large"
                    onClick={() => setActiveSection('playground')}
                  >
                    🎮 Try It Live
                  </button>
                </div>
              </div>
              <div className="hero-visual">
                <div className="floating-stones">
                  <div className="stone stone-1">🏛️</div>
                  <div className="stone stone-2">⚡</div>
                  <div className="stone stone-3">🎨</div>
                  <div className="stone stone-4">🚀</div>
                </div>
              </div>
            </section>

            {/* Features Section */}
            <section className="features-section">
              <div className="section-header">
                <h2 className="section-title ancient-text">Why Choose Skara.js?</h2>
                <p className="section-subtitle">Ancient wisdom meets cutting-edge technology</p>
              </div>
              
              <div className="features-grid">
                <div className="feature-card glass-card floating-card">
                  <div className="feature-icon">⚡</div>
                  <h3>Lightning Fast</h3>
                  <p>Built with ESBuild for instant compilation and hot reload. Your development experience will be blazing fast.</p>
                  <div className="feature-stats">
                    <span className="stat">~50ms</span>
                    <span className="stat-label">Build Time</span>
                  </div>
                </div>

                <div className="feature-card glass-card floating-card">
                  <div className="feature-icon">🎨</div>
                  <h3>Beautiful Styling</h3>
                  <p>Custom .ss files with built-in Tailwind support. Create stunning UIs with our glass morphism design system.</p>
                  <div className="feature-stats">
                    <span className="stat">100%</span>
                    <span className="stat-label">Custom</span>
                  </div>
                </div>

                <div className="feature-card glass-card floating-card">
                  <div className="feature-icon">🛠️</div>
                  <h3>Developer Experience</h3>
                  <p>Custom file extensions (.ssx, .ss, .sjs), intelligent hot reload, and intuitive API design.</p>
                  <div className="feature-stats">
                    <span className="stat">3</span>
                    <span className="stat-label">File Types</span>
                  </div>
                </div>

                <div className="feature-card glass-card floating-card">
                  <div className="feature-icon">🏛️</div>
                  <h3>Ancient Wisdom</h3>
                  <p>Inspired by Skara Brae's 5000-year legacy. Built with timeless principles for lasting applications.</p>
                  <div className="feature-stats">
                    <span className="stat">5000</span>
                    <span className="stat-label">Years Old</span>
                  </div>
                </div>

                <div className="feature-card glass-card floating-card">
                  <div className="feature-icon">🚀</div>
                  <h3>React-like Hooks</h3>
                  <p>Familiar useState and useEffect hooks. If you know React, you already know Skara.js.</p>
                  <div className="feature-stats">
                    <span className="stat">100%</span>
                    <span className="stat-label">Compatible</span>
                  </div>
                </div>

                <div className="feature-card glass-card floating-card">
                  <div className="feature-icon">📦</div>
                  <h3>Complete Ecosystem</h3>
                  <p>Framework, dev server, build tools, and project generator. Everything you need in one package.</p>
                  <div className="feature-stats">
                    <span className="stat">All-in-1</span>
                    <span className="stat-label">Solution</span>
                  </div>
                </div>
              </div>
            </section>

            {/* Interactive Demo Section */}
            <section className="demo-section">
              <div className="section-header">
                <h2 className="section-title ancient-text">See It In Action</h2>
                <p className="section-subtitle">Interactive demos built with Skara.js</p>
              </div>
              
              <div className="demo-grid">
                <div className="demo-card glass-card">
                  <h3 className="demo-title">⚡ Reactive Counter</h3>
                  <div className="counter-display">{count}</div>
                  <div className="button-group">
                    <button 
                      className="neon-button"
                      onClick={() => setCount(count - 1)}
                    >
                      ➖
                    </button>
                    <button 
                      className="neon-button"
                      onClick={() => setCount(count + 1)}
                    >
                      ➕
                    </button>
                    <button 
                      className="neon-button red"
                      onClick={() => setCount(0)}
                    >
                      🔄
                    </button>
                  </div>
                </div>

                <div className="demo-card glass-card">
                  <h3 className="demo-title">📝 Smart Todo</h3>
                  <div className="todo-demo">
                    <div className="flex gap-4 mb-4">
                      <input
                        type="text"
                        className="todo-input"
                        placeholder="Add a task..."
                        value={todoInput}
                        onChange={(e) => setTodoInput(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && addTodo()}
                        style={{flex: '1'}}
                      />
                      <button className="neon-button" onClick={addTodo}>
                        ➕
                      </button>
                    </div>
                    
                    <div className="todo-list">
                      {todos.slice(0, 3).map(todo => (
                        <div key={todo.id} className="todo-item">
                          <span 
                            onClick={() => toggleTodo(todo.id)}
                            style={{
                              flex: '1', 
                              cursor: 'pointer',
                              textDecoration: todo.done ? 'line-through' : 'none',
                              color: todo.done ? 'rgba(255,255,255,0.5)' : 'white'
                            }}
                          >
                            {todo.done ? '✅' : '⭕'} {todo.text}
                          </span>
                          <button 
                            onClick={() => deleteTodo(todo.id)}
                            style={{
                              background: 'none',
                              border: 'none',
                              color: '#ef4444',
                              cursor: 'pointer'
                            }}
                          >
                            🗑️
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                <div className="demo-card glass-card">
                  <h3 className="demo-title">⏱️ Ancient Timer</h3>
                  <div className="timer-display">{formatTime(seconds)}</div>
                  <div className="progress-bar">
                    <div 
                      className="progress-fill" 
                      style={{ width: `${(seconds % 60) * (100/60)}%` }}
                    ></div>
                  </div>
                  <div className="button-group">
                    <button 
                      className={`neon-button ${isRunning ? 'red' : 'green'}`}
                      onClick={() => setIsRunning(!isRunning)}
                    >
                      {isRunning ? '⏸️' : '▶️'}
                    </button>
                    <button 
                      className="neon-button gray"
                      onClick={() => {
                        setSeconds(0);
                        setIsRunning(false);
                      }}
                    >
                      🔄
                    </button>
                  </div>
                </div>
              </div>
            </section>
          </div>
        );

      case 'docs':
        return (
          <div className="docs-section">
            <div className="docs-header">
              <h1 className="docs-title ancient-text">📚 Documentation</h1>
              <p className="docs-subtitle">Everything you need to build with Skara.js</p>
            </div>

            <div className="docs-grid">
              <div className="docs-nav glass-card">
                <h3>Quick Navigation</h3>
                <ul className="docs-menu">
                  <li><a href="#installation">🚀 Installation</a></li>
                  <li><a href="#getting-started">⚡ Getting Started</a></li>
                  <li><a href="#components">🧩 Components</a></li>
                  <li><a href="#hooks">🎣 Hooks</a></li>
                  <li><a href="#styling">🎨 Styling</a></li>
                  <li><a href="#deployment">📦 Deployment</a></li>
                </ul>
              </div>

              <div className="docs-content">
                <div className="docs-card glass-card" id="installation">
                  <h2>🚀 Installation</h2>
                  <p>Get started with Skara.js in seconds:</p>
                  <div className="code-block">
                    <pre><code>{`# Install Skara.js globally
npm install -g skara-js

# Create a new project
skara create my-ancient-app

# Start development server
cd my-ancient-app
skara dev`}</code></pre>
                  </div>
                </div>

                <div className="docs-card glass-card" id="getting-started">
                  <h2>⚡ Getting Started</h2>
                  <p>Create your first Skara.js component:</p>
                  <div className="code-block">
                    <pre><code>{`// App.ssx
import { h, useState } from 'skara-js';

export function App() {
  const [message, setMessage] = useState('Hello Skara!');
  
  return (
    <div className="app">
      <h1>{message}</h1>
      <button onClick={() => setMessage('Ancient Power!')}>
        Transform
      </button>
    </div>
  );
}`}</code></pre>
                  </div>
                </div>

                <div className="docs-card glass-card" id="components">
                  <h2>🧩 Components</h2>
                  <p>Skara.js components use familiar JSX syntax with .ssx extension:</p>
                  <div className="code-block">
                    <pre><code>{`// Button.ssx
import { h } from 'skara-js';

export function Button({ children, onClick, variant = 'primary' }) {
  return (
    <button 
      className={\`neon-button \${variant}\`}
      onClick={onClick}
    >
      {children}
    </button>
  );
}

// Usage
<Button variant="ancient" onClick={handleClick}>
  🏛️ Ancient Power
</Button>`}</code></pre>
                  </div>
                </div>

                <div className="docs-card glass-card" id="hooks">
                  <h2>🎣 Hooks</h2>
                  <p>Use React-like hooks for state management:</p>
                  <div className="code-block">
                    <pre><code>{`import { h, useState, useEffect } from 'skara-js';

export function DataFetcher() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    fetch('/api/ancient-data')
      .then(res => res.json())
      .then(data => {
        setData(data);
        setLoading(false);
      });
  }, []);
  
  if (loading) return <div>Loading ancient wisdom...</div>;
  
  return <div>{data.message}</div>;
}`}</code></pre>
                  </div>
                </div>

                <div className="docs-card glass-card" id="styling">
                  <h2>🎨 Styling</h2>
                  <p>Use .ss files for enhanced CSS with Tailwind support:</p>
                  <div className="code-block">
                    <pre><code>{`/* styles.ss */
.ancient-card {
  @apply p-6 rounded-lg;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  
  &:hover {
    transform: scale(1.05);
    box-shadow: 0 25px 50px -12px rgba(139, 92, 246, 0.25);
  }
}

.neon-glow {
  box-shadow: 0 0 20px theme('colors.ancient.400');
}`}</code></pre>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'playground':
        return (
          <div className="playground-section">
            <div className="playground-header">
              <h1 className="playground-title ancient-text">🎮 Interactive Playground</h1>
              <p className="playground-subtitle">Try Skara.js code live in your browser</p>
            </div>

            <div className="playground-container">
              <div className="playground-nav glass-card">
                <h3>Examples</h3>
                <div className="example-buttons">
                  <button 
                    className={`example-btn ${codeExample === 'counter' ? 'active' : ''}`}
                    onClick={() => setCodeExample('counter')}
                  >
                    ⚡ Counter
                  </button>
                  <button 
                    className={`example-btn ${codeExample === 'todo' ? 'active' : ''}`}
                    onClick={() => setCodeExample('todo')}
                  >
                    📝 Todo
                  </button>
                  <button 
                    className={`example-btn ${codeExample === 'effect' ? 'active' : ''}`}
                    onClick={() => setCodeExample('effect')}
                  >
                    ⏱️ Timer
                  </button>
                </div>
              </div>

              <div className="playground-editor glass-card">
                <div className="editor-header">
                  <span className="editor-title">📝 Code Editor</span>
                  <span className="file-name">{codeExample}.ssx</span>
                </div>
                <div className="code-editor">
                  <pre><code>{codeExamples[codeExample]}</code></pre>
                </div>
              </div>

              <div className="playground-preview glass-card">
                <div className="preview-header">
                  <span className="preview-title">👁️ Live Preview</span>
                  <span className="preview-status">🟢 Running</span>
                </div>
                <div className="preview-content">
                  {codeExample === 'counter' && (
                    <div className="preview-demo">
                      <h2 style={{marginBottom: '16px'}}>Count: {count}</h2>
                      <button 
                        className="neon-button"
                        onClick={() => setCount(count + 1)}
                      >
                        Increase
                      </button>
                    </div>
                  )}
                  {codeExample === 'todo' && (
                    <div className="preview-demo">
                      <input 
                        className="todo-input"
                        value={todoInput}
                        onChange={(e) => setTodoInput(e.target.value)}
                        placeholder="Enter a task..."
                        style={{marginBottom: '16px', width: '100%'}}
                      />
                      <button className="neon-button" onClick={addTodo}>Add</button>
                      <div style={{marginTop: '16px'}}>
                        {todos.slice(0, 2).map(todo => (
                          <div key={todo.id} style={{padding: '8px', background: 'rgba(255,255,255,0.1)', margin: '4px 0', borderRadius: '4px'}}>
                            {todo.text}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  {codeExample === 'effect' && (
                    <div className="preview-demo">
                      <h2 style={{marginBottom: '16px'}}>{seconds}s</h2>
                      <button 
                        className={`neon-button ${isRunning ? 'red' : 'green'}`}
                        onClick={() => setIsRunning(!isRunning)}
                      >
                        {isRunning ? 'Pause' : 'Start'}
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return <div>Section not found</div>;
    }
  };

  return (
    <div className="app">
      {/* Navigation */}
      <nav className="navbar glass-card">
        <div className="nav-container">
          <div className="nav-brand">
            <span className="brand-icon">🏛️</span>
            <span className="brand-text ancient-text">SKARA.JS</span>
          </div>
          
          <div className={`nav-menu ${isMenuOpen ? 'active' : ''}`}>
            <button 
              className={`nav-link ${activeSection === 'home' ? 'active' : ''}`}
              onClick={() => {setActiveSection('home'); setIsMenuOpen(false);}}
            >
              🏠 Home
            </button>
            <button 
              className={`nav-link ${activeSection === 'docs' ? 'active' : ''}`}
              onClick={() => {setActiveSection('docs'); setIsMenuOpen(false);}}
            >
              📚 Docs
            </button>
            <button 
              className={`nav-link ${activeSection === 'playground' ? 'active' : ''}`}
              onClick={() => {setActiveSection('playground'); setIsMenuOpen(false);}}
            >
              🎮 Playground
            </button>
            <a href="https://github.com/skara-js/skara" className="nav-link external">
              🔗 GitHub
            </a>
          </div>

          <button 
            className="mobile-menu-btn"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            {isMenuOpen ? '✕' : '☰'}
          </button>
        </div>
      </nav>

      {/* Main Content */}
      <main className="main-content">
        {renderSection()}
      </main>

      {/* Footer */}
      <footer className="footer">
        <div className="footer-content">
          <div className="footer-section">
            <h4 className="ancient-text">🏛️ Skara.js</h4>
            <p>Ancient wisdom meets modern development</p>
            <div className="social-links">
              <a href="#" className="social-link">📧</a>
              <a href="#" className="social-link">🐦</a>
              <a href="#" className="social-link">💬</a>
            </div>
          </div>
          
          <div className="footer-section">
            <h4>Resources</h4>
            <ul>
              <li><a href="#" onClick={() => setActiveSection('docs')}>Documentation</a></li>
              <li><a href="#" onClick={() => setActiveSection('playground')}>Playground</a></li>
              <li><a href="#">Examples</a></li>
              <li><a href="#">Community</a></li>
            </ul>
          </div>
          
          <div className="footer-section">
            <h4>Framework</h4>
            <ul>
              <li><a href="#">Components</a></li>
              <li><a href="#">Hooks</a></li>
              <li><a href="#">Styling</a></li>
              <li><a href="#">Build Tools</a></li>
            </ul>
          </div>
        </div>
        
        <div className="footer-bottom">
          <p>© 2024 Skara.js • Built to last through the ages • Like Skara Brae 🏛️</p>
        </div>
      </footer>
    </div>
  );
}